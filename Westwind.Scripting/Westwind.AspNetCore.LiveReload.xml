<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Scripting</name>
    </assembly>
    <members>
        <member name="T:Westwind.Scripting.CSharpScriptExecution">
             <summary>
             Class that can be used to execute code snippets or entire blocks of methods
             dynamically. Two methods are provided:
            
             * ExecuteCode -  executes code. Pass parameters and return a value
             * ExecuteMethod - lets you provide one or more method bodies to execute
             * Evaluate - Evaluates an expression on the fly (uses ExecuteCode internally)
             * CompileClass - compiles a class and returns the a class instance
            
             Assemblies used for execution are cached and are reused for a given block
             of code provided.
             </summary>
        </member>
        <member name="F:Westwind.Scripting.CSharpScriptExecution.CachedAssemblies">
            <summary>
            Internal list of assemblies that are cached for snippets of the same type.
            List holds a list of cached assemblies with a hash code for the code executed as
            the key.
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Namespaces">
            <summary>
            List of additional namespaces to add to the script
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.References">
            <summary>
            List of additional assembly references that are added to the
            compiler parameters in order to execute the script code.
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.OutputAssembly">
            <summary>
            Filename for the output assembly to generate. If empty the
            assembly is generated in memory (dynamic filename managed by
            the .NET runtime)
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.GeneratedClassCode">
            <summary>
            Last generated code for this code snippet
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.SaveGeneratedCode">
            <summary>
            Determines whether GeneratedCode will be set with the source
            code for the full generated class
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ThrowExceptions">
            <summary>
            If true throws exceptions rather than failing silently
            and returning error state. Default is false.
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ErrorMessage">
            <summary>
            Error message if an error occurred during the invoked
            method or script call
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Error">
            <summary>
            Error flag that is set if an error occurred during the invoked
            method or script call
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Assembly">
            <summary>
            Internal reference to the Assembly Generated
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ObjectInstance">
            <summary>
            Internal reference to the generated type that
            is to be invoked
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Parameters">
            <summary>
            Internal Compiler Parameters
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.CompilerResults">
            <summary>
            Compiler Results from the Compilation Process with
            detailed error information if an error occurs.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a complete method by wrapping it into a class.
            </summary>
            <param name="code">One or more complete methods.</param>
            <param name="methodName">Name of the method to call.</param>
            <param name="parameters">any number of variable parameters</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteMethodAsync(System.String,System.String,System.Object[])">
            <summary>
            A method that has a public async Task&lt;object&gt;(parameters) { }  signature
            </summary>
            <param name="code"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.Evaluate(System.String,System.Object[])">
            <summary>
            Evaluates a single value or expression that returns a value.
            </summary>
            <param name="code"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.EvaluateAsync(System.String,System.Object[])">
            <summary>
            Evaluates a single value or expression that returns a value.
            </summary>
            <param name="code"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCode(System.String,System.Object[])">
            <summary>
            Executes a snippet of code. Pass in a variable number of parameters
            (accessible via the parameters[0..n] array) and return an object parameter.
            Code should include:  return (object) SomeValue as the last line or return null
            </summary>
            <param name="code">The code to execute</param>
            <param name="parameters">The parameters to pass the code
            You can reference parameters as @0, @1, @2 in code to map
            to the parameter array items (ie. @1 instead of parameters[1])
            </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeAsync(System.String,System.Object[])">
            <summary>
            Executes a snippet of code. Pass in a variable number of parameters
            (accessible via the parameters[0..n] array) and return an object parameter.
            Code should include:  return (object) SomeValue as the last line or return null
            </summary>
            <param name="code">The code to execute</param>
            <param name="parameters">The parameters to pass the code
            You can reference parameters as @0, @1, @2 in code to map
            to the parameter array items (ie. @1 instead of parameters[1])
            </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeFromAssembly(System.String,System.Reflection.Assembly,System.Object[])">
            <summary>
            Executes a method from an assembly that was previously compiled
            </summary>
            <param name="code"></param>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeFromAssemblyAsync(System.String,System.Reflection.Assembly,System.Object[])">
            <summary>
            Executes a method from an assembly that was previously compiled
            </summary>
            <param name="code"></param>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileClass(System.String)">
            <summary>
            This method compiles a class and hands back a
            dynamic reference to that class that you can
            call members on.
            </summary>
            <param name="code">Fully self-contained C# class</param>
            <returns>Instance of that class or null</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileClassToType(System.String)">
            <summary>
            This method compiles a class and hands back a
            dynamic reference to that class that you can
            call members on.
            </summary>
            <param name="code">Fully self-contained C# class</param>
            <returns>Instance of that class or null</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileAssembly(System.String)">
            <summary>
            Compiles and runs the source code for a complete assembly.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssembly(System.String)">
            <summary>
            Adds an assembly to be added to the compilation context.
            </summary>
            <param name="assemblyDll">assembly DLL name. Path is required if not in startup or .NET assembly folder</param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssembly(System.Type)">
            <summary>
            Adds an assembly reference from an existing type
            </summary>
            <param name="type">any .NET type that can be referenced in the current application</param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssemblies(System.String[])">
            <summary>
            Adds a list of assemblies to the References
            collection.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddNamespace(System.String)">
            <summary>
            Adds a namespace to the referenced namespaces
            used at compile time.
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddNamespaces(System.String[])">
            <summary>
            Adds a set of namespace to the referenced namespaces
            used at compile time.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddDefaultReferencesAndNamespaces">
            <summary>
            Adds basic System assemblies and namespaces so basic
            operations work.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Helper method to invoke a method on an object using Reflection
            </summary>
            <param name="instance">An object instance. You can pass script.ObjectInstance</param>
            <param name="method">The method name as a string</param>
            <param name="parameters">a variable list of parameters to pass</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CreateInstance">
             <summary>
             Creates an instance of the object specified
             by the GeneratedNamespace and GeneratedClassName.
            
             Sets the ObjectInstance member which is returned
             </summary>
             <returns>Instance of the class or null on error</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.GenerateHashCode(System.String)">
            <summary>
            Generates a hashcode for a block of code
            in combination with the compiler mode.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.Dispose">
            <summary>
             cleans up the compiler
            </summary>
        </member>
        <member name="T:Westwind.Scripting.ScriptCompilerModes">
             <summary>
            
             </summary>
        </member>
        <member name="F:Westwind.Scripting.ScriptCompilerModes.Classic">
            <summary>
            Uses the built-in C# 5.0 compiler. Using this compiler
            requires no additional assemblies
            </summary>
        </member>
        <member name="F:Westwind.Scripting.ScriptCompilerModes.Roslyn">
             <summary>
             Uses the Roslyn Compiler. When this flag is set make
             sure that the host project includes this package:
            
             Microsoft.CodeDom.Providers.DotNetCompilerPlatform
            
             This adds a the compiler binaries to your application
             so be aware of the overhead.
             </summary>
        </member>
        <member name="T:Westwind.Scripting.NamespaceList">
            <summary>
            HashSet of namespaces
            </summary>
        </member>
        <member name="T:Westwind.Scripting.ReferenceList">
            <summary>
            HashSet of References
            </summary>
        </member>
        <member name="M:Westwind.Scripting.ReferenceList.SetReferences(System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Assign the references to the Compiler Parameters
            </summary>
            <param name="parameters">Parameter options</param>
        </member>
        <member name="T:Westwind.Scripting.RoslynLifetimeManager">
            <summary>
            This helper can help start up Roslyn before first call so that there's no
            long startup delay for first script execution and you can also optionally
            shut Roslyn down and kill the VBCSCompiler that otherwise stays loaded
            even after shutting down your application.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.RoslynLifetimeManager.WarmupRoslyn">
            <summary>
            Run a script execution asynchronously in the background to warm up Roslyn.
            Call this during application startup or anytime before you run the first
            script to ensure scripts execute quickly.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.RoslynLifetimeManager.ShutdownRoslyn(System.String)">
            <summary>
            Call this method to shut down the VBCSCompiler if our
            application started it.
            </summary>
        </member>
    </members>
</doc>
